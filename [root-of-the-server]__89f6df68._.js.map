{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solol/Downloads/brightletters-master/brightletters-master/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { compare } from \"bcryptjs\";\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { hash } from 'bcryptjs';\n\nconst usersFilePath = path.join(process.cwd(), 'src/lib/users.json');\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  password: string;\n}\n\ninterface UsersData {\n  users: User[];\n}\n\nasync function ensureUsersFile() {\n  try {\n    await fs.access(usersFilePath);\n  } catch {\n    // File doesn't exist, create it\n    await fs.writeFile(usersFilePath, JSON.stringify({ users: [] }, null, 2));\n  }\n}\n\nasync function findUserByEmail(email: string): Promise<User | null> {\n  await ensureUsersFile();\n  const fileContent = await fs.readFile(usersFilePath, 'utf-8');\n  const data: UsersData = JSON.parse(fileContent);\n  return data.users.find(user => user.email === email) || null;\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const user = await findUserByEmail(credentials.email);\n\n        if (!user || !user.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const isPasswordValid = await compare(credentials.password, user.password);\n\n        if (!isPasswordValid) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/login\",\n  },\n  callbacks: {\n    async session({ token, session }) {\n      if (token && session.user) {\n        session.user.id = token.id as string;\n        session.user.name = token.name as string;\n        session.user.email = token.email as string;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      const dbUser = await findUserByEmail(token.email as string);\n\n      if (!dbUser) {\n        if (user) {\n          token.id = user?.id;\n        }\n        return token;\n      }\n\n      return {\n        id: dbUser.id,\n        name: dbUser.name,\n        email: dbUser.email,\n      };\n    },\n  },\n};\n\nexport async function registerUser(name: string, email: string, password: string) {\n  try {\n    console.log(\"Starting user registration:\", { email });\n    \n    // Ensure users file exists\n    await ensureUsersFile();\n    \n    // Read users file\n    const fileContent = await fs.readFile(usersFilePath, 'utf-8');\n    const data: UsersData = JSON.parse(fileContent);\n\n    // Check if user already exists\n    if (data.users.some(user => user.email === email)) {\n      console.log(\"User already exists:\", email);\n      throw new Error('User already exists');\n    }\n\n    // Hash password\n    console.log(\"Hashing password\");\n    const hashedPassword = await hash(password, 10);\n\n    // Create new user\n    const newUser: User = {\n      id: Math.random().toString(36).substring(7),\n      name,\n      email,\n      password: hashedPassword,\n    };\n\n    // Add user to the list\n    data.users.push(newUser);\n\n    // Save back to file\n    console.log(\"Saving user to file\");\n    await fs.writeFile(usersFilePath, JSON.stringify(data, null, 2));\n\n    console.log(\"User registered successfully:\", { id: newUser.id, email: newUser.email });\n    return newUser;\n  } catch (error) {\n    console.error(\"Error in registerUser:\", error);\n    throw error;\n  }\n}\n\nexport async function verifyUser(email: string, password: string) {\n  try {\n    console.log(\"Starting user verification:\", { email });\n    \n    // Ensure users file exists\n    await ensureUsersFile();\n    \n    // Read users file\n    const fileContent = await fs.readFile(usersFilePath, 'utf-8');\n    const data: UsersData = JSON.parse(fileContent);\n\n    const user = data.users.find(user => user.email === email);\n    if (!user) {\n      console.log(\"User not found:\", email);\n      throw new Error('User not found');\n    }\n\n    const isValid = await compare(password, user.password);\n    if (!isValid) {\n      console.log(\"Invalid password for user:\", email);\n      throw new Error('Invalid password');\n    }\n\n    console.log(\"User verified successfully:\", { id: user.id, email: user.email });\n    return user;\n  } catch (error) {\n    console.error(\"Error in verifyUser:\", error);\n    throw error;\n  }\n} "],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;;;;;;AAGA,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAa/C,eAAe;IACb,IAAI;QACF,MAAM,6FAAA,CAAA,WAAE,CAAC,MAAM,CAAC;IAClB,EAAE,OAAM;QACN,gCAAgC;QAChC,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,eAAe,KAAK,SAAS,CAAC;YAAE,OAAO,EAAE;QAAC,GAAG,MAAM;IACxE;AACF;AAEA,eAAe,gBAAgB,KAAa;IAC1C,MAAM;IACN,MAAM,cAAc,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,eAAe;IACrD,MAAM,OAAkB,KAAK,KAAK,CAAC;IACnC,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,UAAU;AAC1D;AAEO,MAAM,cAA+B;IAC1C,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,OAAO,MAAM,gBAAgB,YAAY,KAAK;gBAEpD,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,kBAAkB,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAEzE,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,KAAK,EAAE,OAAO,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,MAAM,SAAS,MAAM,gBAAgB,MAAM,KAAK;YAEhD,IAAI,CAAC,QAAQ;gBACX,IAAI,MAAM;oBACR,MAAM,EAAE,GAAG,MAAM;gBACnB;gBACA,OAAO;YACT;YAEA,OAAO;gBACL,IAAI,OAAO,EAAE;gBACb,MAAM,OAAO,IAAI;gBACjB,OAAO,OAAO,KAAK;YACrB;QACF;IACF;AACF;AAEO,eAAe,aAAa,IAAY,EAAE,KAAa,EAAE,QAAgB;IAC9E,IAAI;QACF,QAAQ,GAAG,CAAC,+BAA+B;YAAE;QAAM;QAEnD,2BAA2B;QAC3B,MAAM;QAEN,kBAAkB;QAClB,MAAM,cAAc,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,eAAe;QACrD,MAAM,OAAkB,KAAK,KAAK,CAAC;QAEnC,+BAA+B;QAC/B,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,QAAQ;YACjD,QAAQ,GAAG,CAAC,wBAAwB;YACpC,MAAM,IAAI,MAAM;QAClB;QAEA,gBAAgB;QAChB,QAAQ,GAAG,CAAC;QACZ,MAAM,iBAAiB,MAAM,CAAA,GAAA,mIAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAE5C,kBAAkB;QAClB,MAAM,UAAgB;YACpB,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC;YACzC;YACA;YACA,UAAU;QACZ;QAEA,uBAAuB;QACvB,KAAK,KAAK,CAAC,IAAI,CAAC;QAEhB,oBAAoB;QACpB,QAAQ,GAAG,CAAC;QACZ,MAAM,6FAAA,CAAA,WAAE,CAAC,SAAS,CAAC,eAAe,KAAK,SAAS,CAAC,MAAM,MAAM;QAE7D,QAAQ,GAAG,CAAC,iCAAiC;YAAE,IAAI,QAAQ,EAAE;YAAE,OAAO,QAAQ,KAAK;QAAC;QACpF,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACR;AACF;AAEO,eAAe,WAAW,KAAa,EAAE,QAAgB;IAC9D,IAAI;QACF,QAAQ,GAAG,CAAC,+BAA+B;YAAE;QAAM;QAEnD,2BAA2B;QAC3B,MAAM;QAEN,kBAAkB;QAClB,MAAM,cAAc,MAAM,6FAAA,CAAA,WAAE,CAAC,QAAQ,CAAC,eAAe;QACrD,MAAM,OAAkB,KAAK,KAAK,CAAC;QAEnC,MAAM,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;QACpD,IAAI,CAAC,MAAM;YACT,QAAQ,GAAG,CAAC,mBAAmB;YAC/B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,UAAU,MAAM,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,QAAQ;QACrD,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC,8BAA8B;YAC1C,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC,+BAA+B;YAAE,IAAI,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC;QAC5E,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solol/Downloads/brightletters-master/brightletters-master/src/lib/scores.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\ninterface GameScore {\n  userId: string;\n  gameId: string;\n  score: number;\n  stars: number;\n  timestamp: string;\n}\n\nconst SCORES_FILE = path.join(process.cwd(), 'data', 'scores.json');\n\n// Ensure the data directory exists\nif (!fs.existsSync(path.dirname(SCORES_FILE))) {\n  fs.mkdirSync(path.dirname(SCORES_FILE), { recursive: true });\n}\n\n// Initialize scores file if it doesn't exist\nif (!fs.existsSync(SCORES_FILE)) {\n  fs.writeFileSync(SCORES_FILE, JSON.stringify([]));\n}\n\nexport async function saveScore(score: GameScore) {\n  try {\n    const scores = JSON.parse(fs.readFileSync(SCORES_FILE, 'utf-8'));\n    scores.push(score);\n    fs.writeFileSync(SCORES_FILE, JSON.stringify(scores, null, 2));\n    return true;\n  } catch (error) {\n    console.error('Error saving score:', error);\n    return false;\n  }\n}\n\nexport async function getScores(userId: string, gameId?: string) {\n  try {\n    const scores = JSON.parse(fs.readFileSync(SCORES_FILE, 'utf-8'));\n    return scores.filter((score: GameScore) => {\n      if (gameId) {\n        return score.userId === userId && score.gameId === gameId;\n      }\n      return score.userId === userId;\n    });\n  } catch (error) {\n    console.error('Error getting scores:', error);\n    return [];\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAUA,MAAM,cAAc,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;AAErD,mCAAmC;AACnC,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,eAAe;IAC7C,6FAAA,CAAA,UAAE,CAAC,SAAS,CAAC,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,cAAc;QAAE,WAAW;IAAK;AAC5D;AAEA,6CAA6C;AAC7C,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,cAAc;IAC/B,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,aAAa,KAAK,SAAS,CAAC,EAAE;AACjD;AAEO,eAAe,UAAU,KAAgB;IAC9C,IAAI;QACF,MAAM,SAAS,KAAK,KAAK,CAAC,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,aAAa;QACvD,OAAO,IAAI,CAAC;QACZ,6FAAA,CAAA,UAAE,CAAC,aAAa,CAAC,aAAa,KAAK,SAAS,CAAC,QAAQ,MAAM;QAC3D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;IACT;AACF;AAEO,eAAe,UAAU,MAAc,EAAE,MAAe;IAC7D,IAAI;QACF,MAAM,SAAS,KAAK,KAAK,CAAC,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,aAAa;QACvD,OAAO,OAAO,MAAM,CAAC,CAAC;YACpB,IAAI,QAAQ;gBACV,OAAO,MAAM,MAAM,KAAK,UAAU,MAAM,MAAM,KAAK;YACrD;YACA,OAAO,MAAM,MAAM,KAAK;QAC1B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,EAAE;IACX;AACF","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/solol/Downloads/brightletters-master/brightletters-master/src/app/api/scores/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/auth\";\nimport { saveScore, getScores } from \"@/lib/scores\";\n\nexport async function POST(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.email) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    const body = await request.json();\n    const { gameId, score, stars, timestamp } = body;\n\n    const success = await saveScore({\n      userId: session.user.email,\n      gameId,\n      score,\n      stars,\n      timestamp,\n    });\n\n    if (!success) {\n      return new NextResponse(\"Failed to save score\", { status: 500 });\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error(\"Error saving score:\", error);\n    return new NextResponse(\"Internal Server Error\", { status: 500 });\n  }\n}\n\nexport async function GET(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.email) {\n      return new NextResponse(\"Unauthorized\", { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const gameId = searchParams.get(\"gameId\");\n\n    const scores = await getScores(session.user.email, gameId || undefined);\n\n    return NextResponse.json(scores);\n  } catch (error) {\n    console.error(\"Error fetching scores:\", error);\n    return new NextResponse(\"Internal Server Error\", { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAClD,IAAI,CAAC,SAAS,MAAM,OAAO;YACzB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,gBAAgB;gBAAE,QAAQ;YAAI;QACxD;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG;QAE5C,MAAM,UAAU,MAAM,CAAA,GAAA,sHAAA,CAAA,YAAS,AAAD,EAAE;YAC9B,QAAQ,QAAQ,IAAI,CAAC,KAAK;YAC1B;YACA;YACA;YACA;QACF;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,wBAAwB;gBAAE,QAAQ;YAAI;QAChE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,yBAAyB;YAAE,QAAQ;QAAI;IACjE;AACF;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAClD,IAAI,CAAC,SAAS,MAAM,OAAO;YACzB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,gBAAgB;gBAAE,QAAQ;YAAI;QACxD;QAEA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,MAAM,SAAS,MAAM,CAAA,GAAA,sHAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,IAAI,CAAC,KAAK,EAAE,UAAU;QAE7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,yBAAyB;YAAE,QAAQ;QAAI;IACjE;AACF","debugId":null}}]
}